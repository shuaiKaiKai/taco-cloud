spring.profiles.active=dev
# 应用名称
spring.application.name=taco-cloud

# 应用服务 WEB 访问端口
server.port=8080

# THYMELEAF (ThymeleafAutoConfiguration)
# 开启模板缓存（默认值： true ）
spring.thymeleaf.cache=false
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template=true
# 检查模板位置是否正确（默认值 :true ）
spring.thymeleaf.check-template-location=true
#Content-Type 的值（默认值： text/html ）
spring.thymeleaf.content-type=text/html
# 开启 MVC Thymeleaf 视图解析（默认值： true ）
spring.thymeleaf.enabled=true
# 模板编码
spring.thymeleaf.encoding=UTF-8
# 要被排除在解析之外的视图名称列表，⽤逗号分隔
spring.thymeleaf.excluded-view-names=
# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)
spring.thymeleaf.mode=HTML5
# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）
spring.thymeleaf.prefix=classpath:/templates/
# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）
spring.thymeleaf.suffix=.html

spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test
spring.datasource.username=sa
spring.datasource.password=sa
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.h2.console.settings.web-allow-others=true

taco.orders.pageSize=20

# RabbitMq配置
spring.profiles=prod
spring.rabbitmq.host=rabbit.tacocloud.com
spring.rabbitmq.port=5673
spring.rabbitmq.username=tacoweb
spring.rabbitmq.password=13tm31n

# 设置拉取消息超时时间
spring.rabbitmq.template.receive-timeout=30000

# kafka设置默认的发送主题
spring.kafka.template.default-topic=tacocloud.orders.topic

# Email集成流 配置属性
tacocloud.email.host:imap.tacocloud.com
tacocloud.email.mailbox:INBOX
tacocloud.email.username:taco-in-flow
tacocloud.email.password:1L0v3T4c0s
tacocloud.email.poll-rate:10000
